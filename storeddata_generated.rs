// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(non_camel_case_types)]
#[repr(u8)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum StoredVariants {
  NONE = 0,
  Bool = 1,
  Uint8 = 2,
  Int64 = 3,
  String = 4,

}

pub const ENUM_MIN_STORED_VARIANTS: u8 = 0;
pub const ENUM_MAX_STORED_VARIANTS: u8 = 4;

impl<'a> flatbuffers::Follow<'a> for StoredVariants {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::read_scalar_at::<Self>(buf, loc)
  }
}

impl flatbuffers::EndianScalar for StoredVariants {
  #[inline]
  fn to_little_endian(self) -> Self {
    let n = u8::to_le(self as u8);
    let p = &n as *const u8 as *const StoredVariants;
    unsafe { *p }
  }
  #[inline]
  fn from_little_endian(self) -> Self {
    let n = u8::from_le(self as u8);
    let p = &n as *const u8 as *const StoredVariants;
    unsafe { *p }
  }
}

impl flatbuffers::Push for StoredVariants {
    type Output = StoredVariants;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        flatbuffers::emplace_scalar::<StoredVariants>(dst, *self);
    }
}

#[allow(non_camel_case_types)]
pub const ENUM_VALUES_STORED_VARIANTS:[StoredVariants; 5] = [
  StoredVariants::NONE,
  StoredVariants::Bool,
  StoredVariants::Uint8,
  StoredVariants::Int64,
  StoredVariants::String
];

#[allow(non_camel_case_types)]
pub const ENUM_NAMES_STORED_VARIANTS:[&'static str; 5] = [
    "NONE",
    "Bool",
    "Uint8",
    "Int64",
    "String"
];

pub fn enum_name_stored_variants(e: StoredVariants) -> &'static str {
  let index = e as u8;
  ENUM_NAMES_STORED_VARIANTS[index as usize]
}

pub struct StoredVariantsUnionTableOffset {}
// struct Range, aligned to 8
#[repr(C, align(8))]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct Range {
  start_: u64,
  end_: u64,
} // pub struct Range
impl flatbuffers::SafeSliceAccess for Range {}
impl<'a> flatbuffers::Follow<'a> for Range {
  type Inner = &'a Range;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Range>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Range {
  type Inner = &'a Range;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Range>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Range {
    type Output = Range;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(self as *const Range as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b Range {
    type Output = Range;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(*self as *const Range as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}


impl Range {
  pub fn new<'a>(_start: u64, _end: u64) -> Self {
    Range {
      start_: _start.to_little_endian(),
      end_: _end.to_little_endian(),

    }
  }
  pub fn start<'a>(&'a self) -> u64 {
    self.start_.from_little_endian()
  }
  pub fn end<'a>(&'a self) -> u64 {
    self.end_.from_little_endian()
  }
}

pub enum BoolOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Bool<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Bool<'a> {
    type Inner = Bool<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Bool<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Bool {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args BoolArgs) -> flatbuffers::WIPOffset<Bool<'bldr>> {
      let mut builder = BoolBuilder::new(_fbb);
      builder.add_value(args.value);
      builder.finish()
    }

    pub const VT_VALUE: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn value(&self) -> bool {
    self._tab.get::<bool>(Bool::VT_VALUE, Some(false)).unwrap()
  }
}

pub struct BoolArgs {
    pub value: bool,
}
impl<'a> Default for BoolArgs {
    #[inline]
    fn default() -> Self {
        BoolArgs {
            value: false,
        }
    }
}
pub struct BoolBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> BoolBuilder<'a, 'b> {
  #[inline]
  pub fn add_value(&mut self, value: bool) {
    self.fbb_.push_slot::<bool>(Bool::VT_VALUE, value, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> BoolBuilder<'a, 'b> {
    let start = _fbb.start_table();
    BoolBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Bool<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum Uint8Offset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Uint8<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Uint8<'a> {
    type Inner = Uint8<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Uint8<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Uint8 {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args Uint8Args) -> flatbuffers::WIPOffset<Uint8<'bldr>> {
      let mut builder = Uint8Builder::new(_fbb);
      builder.add_value(args.value);
      builder.finish()
    }

    pub const VT_VALUE: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn value(&self) -> u8 {
    self._tab.get::<u8>(Uint8::VT_VALUE, Some(0)).unwrap()
  }
}

pub struct Uint8Args {
    pub value: u8,
}
impl<'a> Default for Uint8Args {
    #[inline]
    fn default() -> Self {
        Uint8Args {
            value: 0,
        }
    }
}
pub struct Uint8Builder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> Uint8Builder<'a, 'b> {
  #[inline]
  pub fn add_value(&mut self, value: u8) {
    self.fbb_.push_slot::<u8>(Uint8::VT_VALUE, value, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> Uint8Builder<'a, 'b> {
    let start = _fbb.start_table();
    Uint8Builder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Uint8<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum Int64Offset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Int64<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Int64<'a> {
    type Inner = Int64<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Int64<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Int64 {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args Int64Args) -> flatbuffers::WIPOffset<Int64<'bldr>> {
      let mut builder = Int64Builder::new(_fbb);
      builder.add_value(args.value);
      builder.finish()
    }

    pub const VT_VALUE: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn value(&self) -> i64 {
    self._tab.get::<i64>(Int64::VT_VALUE, Some(0)).unwrap()
  }
}

pub struct Int64Args {
    pub value: i64,
}
impl<'a> Default for Int64Args {
    #[inline]
    fn default() -> Self {
        Int64Args {
            value: 0,
        }
    }
}
pub struct Int64Builder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> Int64Builder<'a, 'b> {
  #[inline]
  pub fn add_value(&mut self, value: i64) {
    self.fbb_.push_slot::<i64>(Int64::VT_VALUE, value, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> Int64Builder<'a, 'b> {
    let start = _fbb.start_table();
    Int64Builder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Int64<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum StringOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct String<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for String<'a> {
    type Inner = String<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> String<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        String {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args StringArgs<'args>) -> flatbuffers::WIPOffset<String<'bldr>> {
      let mut builder = StringBuilder::new(_fbb);
      if let Some(x) = args.value { builder.add_value(x); }
      builder.finish()
    }

    pub const VT_VALUE: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn value(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(String::VT_VALUE, None)
  }
}

pub struct StringArgs<'a> {
    pub value: Option<flatbuffers::WIPOffset<&'a  str>>,
}
impl<'a> Default for StringArgs<'a> {
    #[inline]
    fn default() -> Self {
        StringArgs {
            value: None,
        }
    }
}
pub struct StringBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> StringBuilder<'a, 'b> {
  #[inline]
  pub fn add_value(&mut self, value: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(String::VT_VALUE, value);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> StringBuilder<'a, 'b> {
    let start = _fbb.start_table();
    StringBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<String<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum StoredDataOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct StoredData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for StoredData<'a> {
    type Inner = StoredData<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> StoredData<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        StoredData {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args StoredDataArgs<'args>) -> flatbuffers::WIPOffset<StoredData<'bldr>> {
      let mut builder = StoredDataBuilder::new(_fbb);
      if let Some(x) = args.vec_int { builder.add_vec_int(x); }
      if let Some(x) = args.range { builder.add_range(x); }
      if let Some(x) = args.vec_strs { builder.add_vec_strs(x); }
      if let Some(x) = args.variant { builder.add_variant(x); }
      builder.add_opt_bool(args.opt_bool);
      builder.add_variant_type(args.variant_type);
      builder.finish()
    }

    pub const VT_VARIANT_TYPE: flatbuffers::VOffsetT = 4;
    pub const VT_VARIANT: flatbuffers::VOffsetT = 6;
    pub const VT_OPT_BOOL: flatbuffers::VOffsetT = 8;
    pub const VT_VEC_STRS: flatbuffers::VOffsetT = 10;
    pub const VT_RANGE: flatbuffers::VOffsetT = 12;
    pub const VT_VEC_INT: flatbuffers::VOffsetT = 14;

  #[inline]
  pub fn variant_type(&self) -> StoredVariants {
    self._tab.get::<StoredVariants>(StoredData::VT_VARIANT_TYPE, Some(StoredVariants::NONE)).unwrap()
  }
  #[inline]
  pub fn variant(&self) -> Option<flatbuffers::Table<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(StoredData::VT_VARIANT, None)
  }
  #[inline]
  pub fn opt_bool(&self) -> bool {
    self._tab.get::<bool>(StoredData::VT_OPT_BOOL, Some(false)).unwrap()
  }
  #[inline]
  pub fn vec_strs(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<flatbuffers::ForwardsUOffset<&'a str>>>>(StoredData::VT_VEC_STRS, None)
  }
  #[inline]
  pub fn range(&self) -> Option<&'a Range> {
    self._tab.get::<Range>(StoredData::VT_RANGE, None)
  }
  #[inline]
  pub fn vec_int(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Int64<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<flatbuffers::ForwardsUOffset<Int64<'a>>>>>(StoredData::VT_VEC_INT, None)
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn variant_as_bool(&self) -> Option<Bool<'a>> {
    if self.variant_type() == StoredVariants::Bool {
      self.variant().map(|u| Bool::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn variant_as_uint_8(&self) -> Option<Uint8<'a>> {
    if self.variant_type() == StoredVariants::Uint8 {
      self.variant().map(|u| Uint8::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn variant_as_int_64(&self) -> Option<Int64<'a>> {
    if self.variant_type() == StoredVariants::Int64 {
      self.variant().map(|u| Int64::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn variant_as_string(&self) -> Option<String<'a>> {
    if self.variant_type() == StoredVariants::String {
      self.variant().map(|u| String::init_from_table(u))
    } else {
      None
    }
  }

}

pub struct StoredDataArgs<'a> {
    pub variant_type: StoredVariants,
    pub variant: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
    pub opt_bool: bool,
    pub vec_strs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , flatbuffers::ForwardsUOffset<&'a  str>>>>,
    pub range: Option<&'a  Range>,
    pub vec_int: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , flatbuffers::ForwardsUOffset<Int64<'a >>>>>,
}
impl<'a> Default for StoredDataArgs<'a> {
    #[inline]
    fn default() -> Self {
        StoredDataArgs {
            variant_type: StoredVariants::NONE,
            variant: None,
            opt_bool: false,
            vec_strs: None,
            range: None,
            vec_int: None,
        }
    }
}
pub struct StoredDataBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> StoredDataBuilder<'a, 'b> {
  #[inline]
  pub fn add_variant_type(&mut self, variant_type: StoredVariants) {
    self.fbb_.push_slot::<StoredVariants>(StoredData::VT_VARIANT_TYPE, variant_type, StoredVariants::NONE);
  }
  #[inline]
  pub fn add_variant(&mut self, variant: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StoredData::VT_VARIANT, variant);
  }
  #[inline]
  pub fn add_opt_bool(&mut self, opt_bool: bool) {
    self.fbb_.push_slot::<bool>(StoredData::VT_OPT_BOOL, opt_bool, false);
  }
  #[inline]
  pub fn add_vec_strs(&mut self, vec_strs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StoredData::VT_VEC_STRS, vec_strs);
  }
  #[inline]
  pub fn add_range(&mut self, range: &'b  Range) {
    self.fbb_.push_slot_always::<&Range>(StoredData::VT_RANGE, range);
  }
  #[inline]
  pub fn add_vec_int(&mut self, vec_int: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Int64<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StoredData::VT_VEC_INT, vec_int);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> StoredDataBuilder<'a, 'b> {
    let start = _fbb.start_table();
    StoredDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<StoredData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_stored_data<'a>(buf: &'a [u8]) -> StoredData<'a> {
  flatbuffers::get_root::<StoredData<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_stored_data<'a>(buf: &'a [u8]) -> StoredData<'a> {
  flatbuffers::get_size_prefixed_root::<StoredData<'a>>(buf)
}

pub const STORED_DATA_IDENTIFIER: &'static str = "SDFB";

#[inline]
pub fn stored_data_buffer_has_identifier(buf: &[u8]) -> bool {
  return flatbuffers::buffer_has_identifier(buf, STORED_DATA_IDENTIFIER, false);
}

#[inline]
pub fn stored_data_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  return flatbuffers::buffer_has_identifier(buf, STORED_DATA_IDENTIFIER, true);
}

#[inline]
pub fn finish_stored_data_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<StoredData<'a>>) {
  fbb.finish(root, Some(STORED_DATA_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_stored_data_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<StoredData<'a>>) {
  fbb.finish_size_prefixed(root, Some(STORED_DATA_IDENTIFIER));
}
